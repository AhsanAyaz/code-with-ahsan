{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/components/Person.js","webpack:///./src/pages/people.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","name","githubUsername","Container","className","to","style","textDecoration","people","data","allPeopleJson","edges","title","Person","key","id","projects"],"mappings":"oOAAe,GACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,O,kHCbQ,cAA+B,IAA5BY,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,eACtB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,eACnB,kBAAC,OAAD,CAAMC,GAAE,WAAaH,EAAkBI,MAAO,CAAEC,eAAgB,SAC9D,wBAAIH,UAAU,QAAQH,MCDf,sBAAe,IACtBO,EADqB,EAAXC,KACIC,cAAcC,OAAS,GAC3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,IAAD,CAAWA,MAAM,cACjB,kBAACT,EAAA,EAAD,CAAWC,UAAU,aACnB,iCACGI,EAAOnB,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACV,kBAACqB,EAAD,CACEC,IAAKtB,EAAKuB,GACVd,KAAMT,EAAKS,KACXe,SAAUxB,EAAKwB,SACfd,eAAgBV,EAAKU","file":"component---src-pages-people-js-5b0a0a2c6f0d7c9a32ad.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n}\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { Container } from \"react-bootstrap\"\r\n\r\nexport default ({ name, githubUsername }) => {\r\n  return (\r\n    <Container className=\"text-center\">\r\n      <Link to={`/people/${githubUsername}`} style={{ textDecoration: \"none\" }}>\r\n        <h2 className=\"mt-5\">{name}</h2>\r\n      </Link>\r\n    </Container>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { PageLayout, PageTitle } from \"../components\"\r\nimport { SEO } from \"../utils\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport Person from \"../components/Person\"\r\n\r\nexport default ({ data }) => {\r\n  const people = data.allPeopleJson.edges || []\r\n  return (\r\n    <PageLayout>\r\n      <SEO title=\"Community\" />\r\n      <PageTitle title=\"Community\" />\r\n      <Container className=\"text-left\">\r\n        <section>\r\n          {people.map(({ node }) => (\r\n            <Person\r\n              key={node.id}\r\n              name={node.name}\r\n              projects={node.projects}\r\n              githubUsername={node.githubUsername}\r\n            />\r\n          ))}\r\n        </section>\r\n      </Container>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allPeopleJson(filter : { show : { ne: false } }) {\r\n      edges {\r\n        node {\r\n          id\r\n          projects {\r\n            name\r\n            url\r\n            description\r\n            imageUrl\r\n          }\r\n          name\r\n          githubUsername\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}